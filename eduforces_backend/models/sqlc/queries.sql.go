// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
	"fmt"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (email, name, role) VALUES ($1, $2, $3)
`

type CreateAccountParams struct {
	Email string   `json:"email"`
	Name  string   `json:"name"`
	Role  RoleEnum `json:"role"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount, arg.Email, arg.Name, arg.Role)
	return err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, email, name, role FROM accounts WHERE account_id = $1
`

func (q *Queries) GetAccount(ctx context.Context, accountID uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Name,
		&i.Role,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT account_id, email, name, role FROM accounts WHERE email = $1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	if q.db == nil {
		panic("Database connection is nil")
	}
	fmt.Println("GetAccountByEmail sql", email)
	fmt.Println("database", q.db)
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Email,
		&i.Name,
		&i.Role,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, email, name, role FROM accounts
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.Email,
			&i.Name,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountName = `-- name: UpdateAccountName :exec
UPDATE accounts SET name = $1 WHERE email = $2
`

type UpdateAccountNameParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) UpdateAccountName(ctx context.Context, arg UpdateAccountNameParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountName, arg.Name, arg.Email)
	return err
}
